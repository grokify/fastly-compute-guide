{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fastly Guide (Unofficial) This is an unofficial companion guide to using Fastly Compute@Edge. It builds on the official Fastly documentation with an additional focus on: Quick Start Guides to get a \"Hello World\" app working quickly Day 2 usage to make everything as programmable as possible for creating services , packaging , uploading and activation . Management Console usage for various operations including creating services , uploading packages, and activating services . What is Compute@Edge? Compute@Edge lets you deploy lightweight, fastly to run, serverless code at the edge, in the form of WebAssembly (WASM) packages. The WASM packages are standard definition files that use the WebAssembly System Interface (WASI). See more on the Fastly Product page and this guide's FAQ . Deployment Process There are generally 5 steps for deploying code at Fastly's Edge, some of which can be combined and reordered by some tools such as the Fastly CLI . Create the WASM binary Create the fastly.toml file Create the Edge Code package tarball Upload the Edge Code package tarball Activate the service Prerequisites include: Create an account Create a Compute@Edge service Add a domain Add TLS certificate, which is required for Compute@Edge Note: Compute@Edge requires TLS for connections. Free TLS is provided for Fastly subdomains, but a paid account is required to use your own domain. Edge Code Language Support Code can target WebAssembly in a variety of languages. The following are available with support from Fastly and the community. JavaScript (Fastly): reference , NPM AssemblyScript (Fastly): reference , NPM Rust (Fastly): reference Swift (community): repo Zig (community): repo Fastly's support team offers support on Fastly SDKs, while community projects are supported by their author's and the community. See the community SDKs page for general info on how to use these. For a discussion on new language support, including Go, check out the article on Evaluating new languages for Compute@Edge . Deployment Options Fastly offers several ways to deploy Fastly edge code packages to production. Fastly CLI - an easy way to create and upload packages manually Fastly Management Console - upload packages via drag-and-drop from your filesystem Fastly API - upload packages via Fastly's \"Upload a Compute@Edge package\" API Fastly API Client SDK for Go - upload packages via the UpdatePackage function Fastly API Client SDK for JavaScript - upload packages via the putPackage function Fastly API Client SDK for PHP - upload packages via the putPackage function See the Deployment page for more information on these approaches. The Packaging page covers the service package file format, along with approaches to create the service package. Fastly also provides API Client SDKs in Python , Ruby , and Perl . To request Upload Package API support, please post a GitHub Issue for their respective GitHub repositories. Local testing can be done using Viceroy .","title":"Home"},{"location":"#fastly-guide-unofficial","text":"This is an unofficial companion guide to using Fastly Compute@Edge. It builds on the official Fastly documentation with an additional focus on: Quick Start Guides to get a \"Hello World\" app working quickly Day 2 usage to make everything as programmable as possible for creating services , packaging , uploading and activation . Management Console usage for various operations including creating services , uploading packages, and activating services .","title":"Fastly Guide (Unofficial)"},{"location":"#what-is-computeedge","text":"Compute@Edge lets you deploy lightweight, fastly to run, serverless code at the edge, in the form of WebAssembly (WASM) packages. The WASM packages are standard definition files that use the WebAssembly System Interface (WASI). See more on the Fastly Product page and this guide's FAQ .","title":"What is Compute@Edge?"},{"location":"#deployment-process","text":"There are generally 5 steps for deploying code at Fastly's Edge, some of which can be combined and reordered by some tools such as the Fastly CLI . Create the WASM binary Create the fastly.toml file Create the Edge Code package tarball Upload the Edge Code package tarball Activate the service Prerequisites include: Create an account Create a Compute@Edge service Add a domain Add TLS certificate, which is required for Compute@Edge Note: Compute@Edge requires TLS for connections. Free TLS is provided for Fastly subdomains, but a paid account is required to use your own domain.","title":"Deployment Process"},{"location":"#edge-code-language-support","text":"Code can target WebAssembly in a variety of languages. The following are available with support from Fastly and the community. JavaScript (Fastly): reference , NPM AssemblyScript (Fastly): reference , NPM Rust (Fastly): reference Swift (community): repo Zig (community): repo Fastly's support team offers support on Fastly SDKs, while community projects are supported by their author's and the community. See the community SDKs page for general info on how to use these. For a discussion on new language support, including Go, check out the article on Evaluating new languages for Compute@Edge .","title":"Edge Code Language Support"},{"location":"#deployment-options","text":"Fastly offers several ways to deploy Fastly edge code packages to production. Fastly CLI - an easy way to create and upload packages manually Fastly Management Console - upload packages via drag-and-drop from your filesystem Fastly API - upload packages via Fastly's \"Upload a Compute@Edge package\" API Fastly API Client SDK for Go - upload packages via the UpdatePackage function Fastly API Client SDK for JavaScript - upload packages via the putPackage function Fastly API Client SDK for PHP - upload packages via the putPackage function See the Deployment page for more information on these approaches. The Packaging page covers the service package file format, along with approaches to create the service package. Fastly also provides API Client SDKs in Python , Ruby , and Perl . To request Upload Package API support, please post a GitHub Issue for their respective GitHub repositories. Local testing can be done using Viceroy .","title":"Deployment Options"},{"location":"basics/","text":"Basics This section describes topics that are not tied to specific products but important to bootstrap them for implementation.","title":"Overview"},{"location":"basics/#basics","text":"This section describes topics that are not tied to specific products but important to bootstrap them for implementation.","title":"Basics"},{"location":"basics/account/","text":"Creating an Account Using a Free Account To try Fastly, you can click the \"Try Fastly free\" button on the Fastly homepage which takes you to the sign up page . Note, if the website recognizes that you already have an account, you will see a \"Login\" button instead of \"Try Fastly free\". Limitations of a Free Account A free account is enough to launch a service using a Fastly subdomain, e.g. <your-subdomain>.global.ssl.fastly.net . If you wish to use your own domain, e.g. yourdomain.com , you must upgrade to a paid account which can be done via the Fastly Management Console.","title":"Getting an account"},{"location":"basics/account/#creating-an-account","text":"","title":"Creating an Account"},{"location":"basics/account/#using-a-free-account","text":"To try Fastly, you can click the \"Try Fastly free\" button on the Fastly homepage which takes you to the sign up page . Note, if the website recognizes that you already have an account, you will see a \"Login\" button instead of \"Try Fastly free\".","title":"Using a Free Account"},{"location":"basics/account/#limitations-of-a-free-account","text":"A free account is enough to launch a service using a Fastly subdomain, e.g. <your-subdomain>.global.ssl.fastly.net . If you wish to use your own domain, e.g. yourdomain.com , you must upgrade to a paid account which can be done via the Fastly Management Console.","title":"Limitations of a Free Account"},{"location":"basics/domains_and_tls/","text":"Using Domains Edge functions are accessed over HTTP so you need to add one or more domains to your Edge services to use it. You can use a Fastly subdomain or bring your own domain. In either case, Compute@Edge requires TLS so you will need to have TLS enabled. All non-TLS URLs are redirect to TLS by Fastly. For testing purposes, it may be useful to enable both. Using a Fastly Subdomain A Fastly subdomain can be ideal for services with HTTP URLs that are not directly visible by users such as API services, media services, and others. A Fastly subdomain looks like the following: your-subdomain.global.ssl.fastly.net Simply choose a subomdain using the format <your_subdomain>.global.ssl.fastly.net and add it to your Service configuration. A Fastly subdomain comes with Fastly's Free TLS service which is documented in the Setting up free TLS guide . Using Your Own Domain You can also use your own domain as follows: www.your-domain.com Both Apex and non-Apex domains are supported. Due to the nuances of using Apex domains, you will have slightly less flexibility if you choose to use one. With your own subdomain, you will need to do three things: Decide on using a apex domain like example.com or subdomain like www.example.com . Ensure you have a paid account Add a certificate by using Fastly's integrations with Let's Encrypt and Globalsign or bringing your own Note: Since Compute@Edge requires TLS, you will not be able to use Let's Encrypt's manual certification provisioning process as the Let's Encrypt needs to access a file in the .well-known folder which won't be accessible. How to Add a Domain In either case, start off by adding a domain to your service. You can do this using the Fastly Management Console or the API / SDKs. Console API & SDKs In the Fastly web management console , nagivate to your Compute \"Service configuration\" page and then click on the \"Domains\" section to add a domain for your site. Domains can be added via the \"Add a domain name to a service\" API . This API is located at: POST https://api/service/{service_id}/version/{version_id}/domain","title":"Domains and TLS"},{"location":"basics/domains_and_tls/#using-domains","text":"Edge functions are accessed over HTTP so you need to add one or more domains to your Edge services to use it. You can use a Fastly subdomain or bring your own domain. In either case, Compute@Edge requires TLS so you will need to have TLS enabled. All non-TLS URLs are redirect to TLS by Fastly. For testing purposes, it may be useful to enable both.","title":"Using Domains"},{"location":"basics/domains_and_tls/#using-a-fastly-subdomain","text":"A Fastly subdomain can be ideal for services with HTTP URLs that are not directly visible by users such as API services, media services, and others. A Fastly subdomain looks like the following: your-subdomain.global.ssl.fastly.net Simply choose a subomdain using the format <your_subdomain>.global.ssl.fastly.net and add it to your Service configuration. A Fastly subdomain comes with Fastly's Free TLS service which is documented in the Setting up free TLS guide .","title":"Using a Fastly Subdomain"},{"location":"basics/domains_and_tls/#using-your-own-domain","text":"You can also use your own domain as follows: www.your-domain.com Both Apex and non-Apex domains are supported. Due to the nuances of using Apex domains, you will have slightly less flexibility if you choose to use one. With your own subdomain, you will need to do three things: Decide on using a apex domain like example.com or subdomain like www.example.com . Ensure you have a paid account Add a certificate by using Fastly's integrations with Let's Encrypt and Globalsign or bringing your own Note: Since Compute@Edge requires TLS, you will not be able to use Let's Encrypt's manual certification provisioning process as the Let's Encrypt needs to access a file in the .well-known folder which won't be accessible.","title":"Using Your Own Domain"},{"location":"basics/domains_and_tls/#how-to-add-a-domain","text":"In either case, start off by adding a domain to your service. You can do this using the Fastly Management Console or the API / SDKs. Console API & SDKs In the Fastly web management console , nagivate to your Compute \"Service configuration\" page and then click on the \"Domains\" section to add a domain for your site. Domains can be added via the \"Add a domain name to a service\" API . This API is located at: POST https://api/service/{service_id}/version/{version_id}/domain","title":"How to Add a Domain"},{"location":"basics/service/","text":"Creating a Service A Compute@Edge service must be created for each serverless function you want to run. Each service can listen to one or more domains, but each domain can only map to a single service. A Compute@Edge service can be created by the CLI, UI, API or API SDKs. Note: after you have a service, be sure to add a domain so it can be accessed . The CLI and SDKs both use the \"Create a service\" API . Note that this API requires the engineer role. The superuser role does not satisfy the requirements for this API. Using the Console In the console, click on the \"Compute\" menu item: Click on the \"Create a Compute service\" button: Note the Service ID beside your service name on the resulting page\" Using the CLI and API Note: to use the CLI and API/SDKs, the token must be issued for a user with the engineer role. See the Troubleshooting section below for error messages you will encounter using the superuser role. For additional SDK examples, see the API Reference for the \"Create a service\" API . CLI cURL HTTP % fastly service create --name = \"your-service-name\" --type = \"wasm\" SUCCESS: Created service 2KX9IIEH4ppKNsa6MZBwPJ % curl -D - -X POST --location \"https://api.fastly.com/service\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" \\ -d \"name=your-service-name&type=wasm\" POST /service HTTP/1.1 Host: api.fastly.com Content-Type: application/x-www-form-urlencoded Accept: application/json Fastly-Key: YOUR_FASTLY_TOKEN name = your-service-name & type = wasm Troubleshooting Using the Superuser Permission While a user with the superuser role can create a service in the Fastly Management Console, the same role cannot be used to create a service via the API. The engineer role is required. If you attempt to create a service with a superuser role you will receive the following errors: Error Using the CLI Attempting to create a service using the Fastly CLI with a superuser role will result in the following error: ERROR: the Fastly API returned 404 Not Found: \\ Record not found ( Cannot find 'service' ) . Error Using the API Attempting to create a service using the Fastly API with a superuser role will result in the following error: { \"msg\" : \"Record not found\" , \"detail\" : \"Cannot find 'service'\" } Resolution To resolve this issue, use an API Token for a user with the engineer access control role. Workarounds A workaround is to use the Fastly Management Console to create services.","title":"Creating a Service"},{"location":"basics/service/#creating-a-service","text":"A Compute@Edge service must be created for each serverless function you want to run. Each service can listen to one or more domains, but each domain can only map to a single service. A Compute@Edge service can be created by the CLI, UI, API or API SDKs. Note: after you have a service, be sure to add a domain so it can be accessed . The CLI and SDKs both use the \"Create a service\" API . Note that this API requires the engineer role. The superuser role does not satisfy the requirements for this API.","title":"Creating a Service"},{"location":"basics/service/#using-the-console","text":"In the console, click on the \"Compute\" menu item: Click on the \"Create a Compute service\" button: Note the Service ID beside your service name on the resulting page\"","title":"Using the Console"},{"location":"basics/service/#using-the-cli-and-api","text":"Note: to use the CLI and API/SDKs, the token must be issued for a user with the engineer role. See the Troubleshooting section below for error messages you will encounter using the superuser role. For additional SDK examples, see the API Reference for the \"Create a service\" API . CLI cURL HTTP % fastly service create --name = \"your-service-name\" --type = \"wasm\" SUCCESS: Created service 2KX9IIEH4ppKNsa6MZBwPJ % curl -D - -X POST --location \"https://api.fastly.com/service\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" \\ -d \"name=your-service-name&type=wasm\" POST /service HTTP/1.1 Host: api.fastly.com Content-Type: application/x-www-form-urlencoded Accept: application/json Fastly-Key: YOUR_FASTLY_TOKEN name = your-service-name & type = wasm","title":"Using the CLI and API"},{"location":"basics/service/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"basics/service/#using-the-superuser-permission","text":"While a user with the superuser role can create a service in the Fastly Management Console, the same role cannot be used to create a service via the API. The engineer role is required. If you attempt to create a service with a superuser role you will receive the following errors:","title":"Using the Superuser Permission"},{"location":"basics/service/#error-using-the-cli","text":"Attempting to create a service using the Fastly CLI with a superuser role will result in the following error: ERROR: the Fastly API returned 404 Not Found: \\ Record not found ( Cannot find 'service' ) .","title":"Error Using the CLI"},{"location":"basics/service/#error-using-the-api","text":"Attempting to create a service using the Fastly API with a superuser role will result in the following error: { \"msg\" : \"Record not found\" , \"detail\" : \"Cannot find 'service'\" }","title":"Error Using the API"},{"location":"basics/service/#resolution","text":"To resolve this issue, use an API Token for a user with the engineer access control role.","title":"Resolution"},{"location":"basics/service/#workarounds","text":"A workaround is to use the Fastly Management Console to create services.","title":"Workarounds"},{"location":"basics/token/","text":"API Tokens Overview API tokens are required for accessing the API directly and tools that use the API such as Fastly CLI. The token is a alpha-numeric string that is supplied as the Fastly-Key HTTP request header in API requests. Creating Your Token If you wish to manage tokens via the API, you will need to create your first token in the Console to be able to call the API to begin with. Use the following steps: Log into the Fastly Management Console at https://manage.fastly.com Click your name in the upper left corer to open the menu and then click on \"Account\" In the left nav sidebar click on the menu item for \"Personal API tokens\" under \"Your profile\" Click \"+ Create Token\" Learn More You can learn about these tokens here: Managing tokens via the Console Managing tokens via the API","title":"Getting an API token"},{"location":"basics/token/#api-tokens-overview","text":"API tokens are required for accessing the API directly and tools that use the API such as Fastly CLI. The token is a alpha-numeric string that is supplied as the Fastly-Key HTTP request header in API requests.","title":"API Tokens Overview"},{"location":"basics/token/#creating-your-token","text":"If you wish to manage tokens via the API, you will need to create your first token in the Console to be able to call the API to begin with. Use the following steps: Log into the Fastly Management Console at https://manage.fastly.com Click your name in the upper left corer to open the menu and then click on \"Account\" In the left nav sidebar click on the menu item for \"Personal API tokens\" under \"Your profile\" Click \"+ Create Token\"","title":"Creating Your Token"},{"location":"basics/token/#learn-more","text":"You can learn about these tokens here: Managing tokens via the Console Managing tokens via the API","title":"Learn More"},{"location":"compute/","text":"Compute@Edge Compute@Edge lets you deploy serverless code at the edge, in the form of WebAssembly (WASM) packages. The WASM packages are standard definition files that use the WebAssembly System Interface (WASI). Deployment Process There are generally 5 steps for deploying code at Fastly's Edge, some of which can be combined and reordered by some tools such as the Fastly CLI . Create the WASM binary Create the fastly.toml file Create the Edge Code package tarball Upload the Edge Code package tarball Activate the service Prerequisites include: Create an account Create a Compute@Edge service Add a domain Add TLS certificate, which is required for Compute@Edge Note: Compute@Edge requires TLS for connections, which requires a paid account. Edge Code Language Support Code can target WebAssembly in a variety of languages. The following are available with support from Fastly and the community. JavaScript (Fastly): reference , NPM AssemblyScript (Fastly): reference , NPM Rust (Fastly): reference Swift (community): repo Zig (community): repo Fastly's support team offers support on Fastly SDKs, while community projects are supported by their author's and the community. See the community SDKs page for general info on how to use these. For a discussion on new language support, including Go, check out the article on Evaluating new languages for Compute@Edge . Deployment Options Fastly offers several ways to deploy Fastly edge code packages to production. Fastly CLI - an easy way to create and upload packages manually Fastly Management Console - upload packages via drag-and-drop from your filesystem Fastly API - upload packages via Fastly's \"Upload a Compute@Edge package\" API Fastly API Client SDK for Go - upload packages via the UpdatePackage function Fastly API Client SDK for JavaScript - upload packages via the putPackage function Fastly API Client SDK for PHP - upload packages via the putPackage function Fastly also provides API Client SDKs in Python , Ruby , and Perl . To request Upload Package API support, please post a GitHub Issue for their respective GitHub repositories. Local testing can be done using Viceroy . Frequently Asked Questions How does WebAssembly compare with Docker? WebAssembly has some advantages over Docker including: See more in this article by Will Cloud-Native WebAssembly Replace Docker? by Michael Yuan and Yicen Xie Docker has some advantages over WebAssembly, including the ability to support more languages.","title":"Compute@Edge"},{"location":"compute/#computeedge","text":"Compute@Edge lets you deploy serverless code at the edge, in the form of WebAssembly (WASM) packages. The WASM packages are standard definition files that use the WebAssembly System Interface (WASI).","title":"Compute@Edge"},{"location":"compute/#deployment-process","text":"There are generally 5 steps for deploying code at Fastly's Edge, some of which can be combined and reordered by some tools such as the Fastly CLI . Create the WASM binary Create the fastly.toml file Create the Edge Code package tarball Upload the Edge Code package tarball Activate the service Prerequisites include: Create an account Create a Compute@Edge service Add a domain Add TLS certificate, which is required for Compute@Edge Note: Compute@Edge requires TLS for connections, which requires a paid account.","title":"Deployment Process"},{"location":"compute/#edge-code-language-support","text":"Code can target WebAssembly in a variety of languages. The following are available with support from Fastly and the community. JavaScript (Fastly): reference , NPM AssemblyScript (Fastly): reference , NPM Rust (Fastly): reference Swift (community): repo Zig (community): repo Fastly's support team offers support on Fastly SDKs, while community projects are supported by their author's and the community. See the community SDKs page for general info on how to use these. For a discussion on new language support, including Go, check out the article on Evaluating new languages for Compute@Edge .","title":"Edge Code Language Support"},{"location":"compute/#deployment-options","text":"Fastly offers several ways to deploy Fastly edge code packages to production. Fastly CLI - an easy way to create and upload packages manually Fastly Management Console - upload packages via drag-and-drop from your filesystem Fastly API - upload packages via Fastly's \"Upload a Compute@Edge package\" API Fastly API Client SDK for Go - upload packages via the UpdatePackage function Fastly API Client SDK for JavaScript - upload packages via the putPackage function Fastly API Client SDK for PHP - upload packages via the putPackage function Fastly also provides API Client SDKs in Python , Ruby , and Perl . To request Upload Package API support, please post a GitHub Issue for their respective GitHub repositories. Local testing can be done using Viceroy .","title":"Deployment Options"},{"location":"compute/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"compute/#how-does-webassembly-compare-with-docker","text":"WebAssembly has some advantages over Docker including: See more in this article by Will Cloud-Native WebAssembly Replace Docker? by Michael Yuan and Yicen Xie Docker has some advantages over WebAssembly, including the ability to support more languages.","title":"How does WebAssembly compare with Docker?"},{"location":"compute/code_javascript/","text":"Writing WASM Edge Code using JavaScript","title":"Writing WASM Edge Code using JavaScript"},{"location":"compute/code_javascript/#writing-wasm-edge-code-using-javascript","text":"","title":"Writing WASM Edge Code using JavaScript"},{"location":"compute/code_rust/","text":"Writing WASM Edge Code using Rust","title":"Writing WASM Edge Code using Rust"},{"location":"compute/code_rust/#writing-wasm-edge-code-using-rust","text":"","title":"Writing WASM Edge Code using Rust"},{"location":"compute/code_zig/","text":"Writing WASM Edge Code using Zig","title":"Writing WASM Edge Code using Zig"},{"location":"compute/code_zig/#writing-wasm-edge-code-using-zig","text":"","title":"Writing WASM Edge Code using Zig"},{"location":"compute/faq/","text":"Frequently Asked Questions Is Go Supported? Go is not currently supported due to a lack of WebAssembly (WASI) support in the Go WASM implimentation as mentioned in the article Evaluating new languages for Compute@Edge . This is still the case as of May 2022. Go WebAssembly does have good community documentation when targeting the web with Go WebAssembly, however stable support for compiling to the WebAssembly System Interface (WASI) is still an open issue as of April, 2020. How does WebAssembly compare with Docker? WebAssembly has some advantages over Docker including: See more in this article by Will Cloud-Native WebAssembly Replace Docker? by Michael Yuan and Yicen Xie","title":"FAQ"},{"location":"compute/faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"compute/faq/#is-go-supported","text":"Go is not currently supported due to a lack of WebAssembly (WASI) support in the Go WASM implimentation as mentioned in the article Evaluating new languages for Compute@Edge . This is still the case as of May 2022. Go WebAssembly does have good community documentation when targeting the web with Go WebAssembly, however stable support for compiling to the WebAssembly System Interface (WASI) is still an open issue as of April, 2020.","title":"Is Go Supported?"},{"location":"compute/faq/#how-does-webassembly-compare-with-docker","text":"WebAssembly has some advantages over Docker including: See more in this article by Will Cloud-Native WebAssembly Replace Docker? by Michael Yuan and Yicen Xie","title":"How does WebAssembly compare with Docker?"},{"location":"compute/getting_started/","text":"Getting Started The basic steps of uploading an Edge Code package include: Create the WASM binary Create the fastly.toml file Create the Edge Code package tarball Upload the Edge Code package tarball","title":"Getting started"},{"location":"compute/getting_started/#getting-started","text":"The basic steps of uploading an Edge Code package include: Create the WASM binary Create the fastly.toml file Create the Edge Code package tarball Upload the Edge Code package tarball","title":"Getting Started"},{"location":"compute/links/","text":"Compute@Edge Links The following are a compliation of useful links for Fastly's Compute@Edge: Overview - docs.fastly.com > Products > Compute@Edge Reference: developer.fastly.com > Reference documentation > Compute@Edge References Examples: developer.fastly.com > Solutions > Examples Tutorials: developer.fastly.com > Learn > Compute@Edge services API Reference: developer.fastly.com > Reference documentation > Fastly API Logging Endpoints: docs.fastly.com > Guides > Compute@Edge Fastly Fiddle: fiddle.fastlydemo.net","title":"Links"},{"location":"compute/links/#computeedge-links","text":"The following are a compliation of useful links for Fastly's Compute@Edge: Overview - docs.fastly.com > Products > Compute@Edge Reference: developer.fastly.com > Reference documentation > Compute@Edge References Examples: developer.fastly.com > Solutions > Examples Tutorials: developer.fastly.com > Learn > Compute@Edge services API Reference: developer.fastly.com > Reference documentation > Fastly API Logging Endpoints: docs.fastly.com > Guides > Compute@Edge Fastly Fiddle: fiddle.fastlydemo.net","title":"Compute@Edge Links"},{"location":"compute/logging/","text":"Compute@Edge Logging Integrations These articles describe Fastly's support for protocols that allow you to stream logs to a variety of locations, including third-party services, for storage and analysis. Our developer documentation provides more information about logging with Compute@Edge code written in Rust, AssemblyScript, and JavaScript Amazon Kinesis Data Stream Amazon S3 Microsoft Azure Blob Storage Cloud Files Coralogix Datadog DigitalOcean Spaces Log streaming: Elasticsearch Log streaming: FTP Log streaming: Google BigQuery Log streaming: Google Cloud Pub/Sub Log streaming: Google Cloud Storage Log streaming: Honeycomb Log streaming: HTTPS Log streaming: Hydrolix Kafka Log Shuttle LogDNA Log streaming: Logentries Log streaming: Loggly Log streaming: Heroku's Logplex Log streaming: New Relic Logs Log streaming: OpenStack Log streaming: Oracle Cloud Storage Log streaming: Papertrail Log streaming: Scalyr Log streaming: SFTP Log streaming: Shape Log Analysis Log streaming: Splunk Log streaming: Storj DCS Log streaming: Sumo Logic Log streaming: Syslog Log streaming: Wasabi Hot Cloud Storage","title":"Compute@Edge Logging Integrations"},{"location":"compute/logging/#computeedge-logging-integrations","text":"These articles describe Fastly's support for protocols that allow you to stream logs to a variety of locations, including third-party services, for storage and analysis. Our developer documentation provides more information about logging with Compute@Edge code written in Rust, AssemblyScript, and JavaScript Amazon Kinesis Data Stream Amazon S3 Microsoft Azure Blob Storage Cloud Files Coralogix Datadog DigitalOcean Spaces Log streaming: Elasticsearch Log streaming: FTP Log streaming: Google BigQuery Log streaming: Google Cloud Pub/Sub Log streaming: Google Cloud Storage Log streaming: Honeycomb Log streaming: HTTPS Log streaming: Hydrolix Kafka Log Shuttle LogDNA Log streaming: Logentries Log streaming: Loggly Log streaming: Heroku's Logplex Log streaming: New Relic Logs Log streaming: OpenStack Log streaming: Oracle Cloud Storage Log streaming: Papertrail Log streaming: Scalyr Log streaming: SFTP Log streaming: Shape Log Analysis Log streaming: Splunk Log streaming: Storj DCS Log streaming: Sumo Logic Log streaming: Syslog Log streaming: Wasabi Hot Cloud Storage","title":"Compute@Edge Logging Integrations"},{"location":"compute/packaging/","text":"Packaging the Edge Code Before uploading to Fastly's Edge, the WASM binary, fastly.toml file and any additional files must be packaged into a gzipped tarball to be uploaded. Tarball Format The file should be named your-sanitized-package-name.tar.gz and have the following files: your-sanitized-package-name/bin/main.wasm your-sanitized-package-name/fastly.toml The sanitized package name is derived from the name property in the fastly.toml file. The algorithm to convert a string to one that is file system friendly is straight-forward and generally involves removing some characters like spaces and punctuation, along with removing diacritics. For the Fastly CLI, the name property is run against the BaseName function from the github.com/kennygrant/sanitize package as seen here in the CLI code . Packaging Examples CLI Go Creating the Edge Code package using the CLI The CLI is available from GitHub will automatically create the WASM binary and tarball file. Using the Fastly CLI is described in detail in the Learning Guide . From the project root, execute the following command. The command for building the package file, fastly compute init , should have created the fastly.toml file in your project root. % fastly compute build This will create the following files in the root directory: pkg/your-sanitized-package-name/bin/main.wasm pkg/your-sanitized-package-name/fastly.toml pkg/your-sanitized-package-name.tar.gz Note: the files under the pkg/your-sanitized-package-name aren't needed. They are left-over artifacts from the packaging process to create the tarball. Creating the Edge Code package using the Go Creating the tarball can be done using archive/tar in the standard library. A wapper in github.com/grokify/fastlywasmly/tarutil can be used to assist as so. This uses the Fastly CLI's Go code as a library to read the TOML file to create the package name. See more at https://github.com/grokify/fastlywasmly package main import ( \"fmt\" \"github.com/grokify/fastlywasmly/tarutil\" ) func main () { outfile , err := tarutil . BuildEdgePackage ( \"/path/to/fastly.toml\" , \"/path/to/anything.wasm or empty if using bindir only\" , \"/path/to/option/bin/dir or empty if using wasm only\" ) if err != nil { panic ( err ) } fmt . Printf ( \"WROTE [%s]\\n\" , outfile ) }","title":"Packaging"},{"location":"compute/packaging/#packaging-the-edge-code","text":"Before uploading to Fastly's Edge, the WASM binary, fastly.toml file and any additional files must be packaged into a gzipped tarball to be uploaded.","title":"Packaging the Edge Code"},{"location":"compute/packaging/#tarball-format","text":"The file should be named your-sanitized-package-name.tar.gz and have the following files: your-sanitized-package-name/bin/main.wasm your-sanitized-package-name/fastly.toml The sanitized package name is derived from the name property in the fastly.toml file. The algorithm to convert a string to one that is file system friendly is straight-forward and generally involves removing some characters like spaces and punctuation, along with removing diacritics. For the Fastly CLI, the name property is run against the BaseName function from the github.com/kennygrant/sanitize package as seen here in the CLI code .","title":"Tarball Format"},{"location":"compute/packaging/#packaging-examples","text":"CLI Go Creating the Edge Code package using the CLI The CLI is available from GitHub will automatically create the WASM binary and tarball file. Using the Fastly CLI is described in detail in the Learning Guide . From the project root, execute the following command. The command for building the package file, fastly compute init , should have created the fastly.toml file in your project root. % fastly compute build This will create the following files in the root directory: pkg/your-sanitized-package-name/bin/main.wasm pkg/your-sanitized-package-name/fastly.toml pkg/your-sanitized-package-name.tar.gz Note: the files under the pkg/your-sanitized-package-name aren't needed. They are left-over artifacts from the packaging process to create the tarball. Creating the Edge Code package using the Go Creating the tarball can be done using archive/tar in the standard library. A wapper in github.com/grokify/fastlywasmly/tarutil can be used to assist as so. This uses the Fastly CLI's Go code as a library to read the TOML file to create the package name. See more at https://github.com/grokify/fastlywasmly package main import ( \"fmt\" \"github.com/grokify/fastlywasmly/tarutil\" ) func main () { outfile , err := tarutil . BuildEdgePackage ( \"/path/to/fastly.toml\" , \"/path/to/anything.wasm or empty if using bindir only\" , \"/path/to/option/bin/dir or empty if using wasm only\" ) if err != nil { panic ( err ) } fmt . Printf ( \"WROTE [%s]\\n\" , outfile ) }","title":"Packaging Examples"},{"location":"compute/quickstart_javascript/","text":"Compute@Edge Quickstart for JavaScript TL/DR To create a simple \"Hello, World!\" synthetic response example, use the Fastly CLI to create an empty project and then modify the src/index.js file to emit \"Hello, World!\" instead of \"OK\". There are a number of files deployed as part of this process, but they key files are the fastly.toml file and the src/index.js file. This is described quickly here along with the CLI commands, and in more detail below. Once you complete this quickstart, see the tutorial and SDK reference for more info along with additional examples and starter kits src/index.js fastly.toml CLI commands /// <reference types=\"@fastly/js-compute\" /> addEventListener ( \"fetch\" , ( event ) => event . respondWith ( handleRequest ( event ))); async function handleRequest ( event ) { return new Response ( \"Hello, World!\" , { status : 200 }); } # This file describes a Fastly Compute@Edge package. To learn more visit: # https://developer.fastly.com/reference/fastly-toml/ authors = [ \"grokify\" ] description = \"Fastly Compute@Edge \\\"Hello, World!\\\" Example App\" language = \"javascript\" manifest_version = 2 name = \"Fastly Compute \\\"Hello, World!\\\"\" service_id = \"\" % mkdir fastly-compute-hello-world-js % cd fastly-compute-hello-world-js % fastly compute init % vi src/index.js % fastly compute publish --service-id = <YourServiceID> --token = <YourAPIToken> At the end of this quickstart, you will see the following in your browser where \"yoursubdomain\" should be one of your choosing. To use your own domain, see the section on Domains and TLS Prerequisites Fastly account Fastly API Token Fastly Service Creating the Empty Project Scaffold Note: the output in this program is from \"Fastly CLI version v2.0.3 (112d60b) Built with go version go1.18.2 linux/amd64\". Get the CLI by following the instructions on the Fastly CLI page . On macOS, use the following: % brew install fastly/tap/fastly Commands % mkdir fastly-compute-hello-world-js % cd fastly-compute-hello-world-js % fastly compute init Output % fastly compute init Creating a new Compute@Edge project. Press ^C at any time to quit. Name: [fastly-compute-hello-world-js-2] Fastly Compute \"Hello, World!\" Description: Fastly Compute@Edge \"Hello, World!\" Example App Author: grokify Language: [1] Rust [2] JavaScript [3] AssemblyScript (beta) [4] Other ('bring your own' Wasm binary) Choose option: [1] 2 Starter kit: [1] Default starter for JavaScript A basic starter kit that demonstrates routing, simple synthetic responses and overriding caching rules. https://github.com/fastly/compute-starter-kit-javascript-default [2] Empty starter for JavaScript An empty application template for the Fastly Compute@Edge environment which simply returns a 200 OK response. https://github.com/fastly/compute-starter-kit-javascript-empty Choose option or paste git URL: [1] 2 \u2713 Initializing... \u2713 Fetching package template... \u2713 Updating package manifest... \u2713 Initializing package... Initialized package Fastly Compute \"Hello, World!\" to: /Users/johnwang/go/src/github.com/grokify/fastly-compute-hello-world-js-2 To publish the package (build and deploy), run: fastly compute publish To learn about deploying Compute@Edge projects using third-party orchestration tools, visit: https://developer.fastly.com/learning/integrations/orchestration/ SUCCESS: Initialized package Fastly Compute \"Hello, World!\" This results in the following list of 5921 files and directories generated from a tar -tf . The vast majority of these are in the node_modules directory which isn't needed for our \"Hello, World!\" program. fastly-compute-hello-world-js.init.contents.txt The top level directory files are as follows without listing out all the files under node_modules . .gitignore README.md fastly.toml node_modules/* npm-shrinkwrap.json package.json src/index.js webpack.config.js Of note, .gitignore omits the node_modules directory along with bin and pkg which haven't been created yet. /node_modules /bin /pkg Fastly.toml The fastly.toml file looks like the following. You can add your Service ID here or add it later outside of this file for more deployment flexibility. This tutorial will supply the Service ID as a Fastly CLI command parameter below. # This file describes a Fastly Compute@Edge package. To learn more visit: # https://developer.fastly.com/reference/fastly-toml/ authors = [ \"grokify\" ] description = \"Fastly Compute@Edge \\\"Hello, World!\\\" Example App\" language = \"javascript\" manifest_version = 2 name = \"Fastly Compute \\\"Hello, World!\\\"\" service_id = \"\" Writing the Code The starter file is in the src/index.js location which has the following content: /// <reference types=\"@fastly/js-compute\" /> addEventListener ( \"fetch\" , ( event ) => event . respondWith ( handleRequest ( event ))); async function handleRequest ( event ) { return new Response ( \"OK\" , { status : 200 }); } Hello, World! To start, let's just modify the \"OK\" text to say \"Hello, World!\" as such: /// <reference types=\"@fastly/js-compute\" /> addEventListener ( \"fetch\" , ( event ) => event . respondWith ( handleRequest ( event ))); async function handleRequest ( event ) { return new Response ( \"Hello, World!\" , { status : 200 }); } The response can be enhanced with a Content-Type header as follows: async function handleRequest ( event ) { return new Response ( \"Hello, World!\" , { status : 200 , headers : new Headers ({ \"Content-Type\" : \"text/html;charset=utf-8\" }), }); } Further Reading on Code See the following resources for more on writing Edge code in JavaScript: JS SDK Reference JS Code Examples JS Dev Guide JS Starter Kits Uploading the Package This quickstart uses the Fastly CLI to upload and activate the code. Alternate methods of packaging, uploading and activating the service are covered in the Packaging and Deployment pages. Using the CLI Specifying Your API Token Before you upload the file, you will need to get a Fastly API token. You can create one from the Fastly Management Console by following the instructions on the tokens page . A token is an alpha-numeric string that looks like the following: DRYzDkfSjieSDji82ie90830ehf02fDH You can use the token several ways: Via the Fastly CLI parameter --token Via the environment variable FASTLY_API_TOKEN Via the Fastly CLI profile using the commands from % fastly profile --help For this Quickstart, we'll set the token using the environment variable such as following on macOS: % export FASTLY_API_TOKEN = <YourFastlyAPIToken> Publishing the Code Fastly CLI has a number of commands to build and deploy the code. The following is an excerpt of the response from $ fastly compute --help : COMMANDS compute build Build a Compute@Edge package locally deploy Deploy a package to a Fastly Compute@Edge service init Initialize a new Compute@Edge package locally pack Package a pre-compiled Wasm binary for a Fastly Compute@Edge service publish Build and deploy a Compute@Edge package to a Fastly service serve Build and run a Compute@Edge package locally update Update a package on a Fastly Compute@Edge service version validate Validate a Compute@Edge package We want to both build the WASM binary and deploy it, so we'll use publish : % fastly compute publish --service-id = <YourPackageServiceID> \u2713 Initializing... \u2713 Verifying package manifest... \u2713 Verifying local javascript toolchain... \u2713 Building package using javascript toolchain... \u2713 Creating package archive... SUCCESS: Built package 'Fastly-Compute-Hello-World' ( pkg/Fastly-Compute-Hello-World.tar.gz ) \u2713 Uploading package... \u2713 Activating version... Manage this service at: https://manage.fastly.com/configure/services/<YourPackageServiceID> View this service at: https://goodapis.global.ssl.fastly.net SUCCESS: Deployed package ( service <YourPackageServiceID>, version 1 ) This will create the following files: bin/index.js bin/main.wasm pkg/Fastly-Compute-Hello-World.tar.gz Doing a TAR list will show the file contents: % tar -tf pkg/Fastly-Compute-Hello-World.tar.gz Fastly-Compute-Hello-World/ Fastly-Compute-Hello-World/bin/ Fastly-Compute-Hello-World/bin/index.js Fastly-Compute-Hello-World/bin/main.wasm Fastly-Compute-Hello-World/fastly.toml Fastly-Compute-Hello-World/package.json You can confirm the package upload in the Fastly Management Console at the following URL: https://manage.fastly.com/compute/services/{YourServiceID}/versions/1/package Add Domain to Service Use the Fastly Management Console to add a domain to the service. For this Quickstart, use a Fastly subdomain such as: <yoursubdomain>.global.ssl.fastly.net While the Management Console says you need to add a backend host to activate, this example does not require one and you can activate without one. Information on using your own domain as well as adding your domain via alternate methods such as the API and SDKs is covered in the Domains and TLS page. Access The Service Use your browser (or cURL) to retrive https://{yoursubdomain}.global.ssl.fastly.net where {yourdomain} is the subdomain you entered above.","title":"Quickstart"},{"location":"compute/quickstart_javascript/#computeedge-quickstart-for-javascript","text":"","title":"Compute@Edge Quickstart for JavaScript"},{"location":"compute/quickstart_javascript/#tldr","text":"To create a simple \"Hello, World!\" synthetic response example, use the Fastly CLI to create an empty project and then modify the src/index.js file to emit \"Hello, World!\" instead of \"OK\". There are a number of files deployed as part of this process, but they key files are the fastly.toml file and the src/index.js file. This is described quickly here along with the CLI commands, and in more detail below. Once you complete this quickstart, see the tutorial and SDK reference for more info along with additional examples and starter kits src/index.js fastly.toml CLI commands /// <reference types=\"@fastly/js-compute\" /> addEventListener ( \"fetch\" , ( event ) => event . respondWith ( handleRequest ( event ))); async function handleRequest ( event ) { return new Response ( \"Hello, World!\" , { status : 200 }); } # This file describes a Fastly Compute@Edge package. To learn more visit: # https://developer.fastly.com/reference/fastly-toml/ authors = [ \"grokify\" ] description = \"Fastly Compute@Edge \\\"Hello, World!\\\" Example App\" language = \"javascript\" manifest_version = 2 name = \"Fastly Compute \\\"Hello, World!\\\"\" service_id = \"\" % mkdir fastly-compute-hello-world-js % cd fastly-compute-hello-world-js % fastly compute init % vi src/index.js % fastly compute publish --service-id = <YourServiceID> --token = <YourAPIToken> At the end of this quickstart, you will see the following in your browser where \"yoursubdomain\" should be one of your choosing. To use your own domain, see the section on Domains and TLS","title":"TL/DR"},{"location":"compute/quickstart_javascript/#prerequisites","text":"Fastly account Fastly API Token Fastly Service","title":"Prerequisites"},{"location":"compute/quickstart_javascript/#creating-the-empty-project-scaffold","text":"Note: the output in this program is from \"Fastly CLI version v2.0.3 (112d60b) Built with go version go1.18.2 linux/amd64\". Get the CLI by following the instructions on the Fastly CLI page . On macOS, use the following: % brew install fastly/tap/fastly","title":"Creating the Empty Project Scaffold"},{"location":"compute/quickstart_javascript/#commands","text":"% mkdir fastly-compute-hello-world-js % cd fastly-compute-hello-world-js % fastly compute init","title":"Commands"},{"location":"compute/quickstart_javascript/#output","text":"% fastly compute init Creating a new Compute@Edge project. Press ^C at any time to quit. Name: [fastly-compute-hello-world-js-2] Fastly Compute \"Hello, World!\" Description: Fastly Compute@Edge \"Hello, World!\" Example App Author: grokify Language: [1] Rust [2] JavaScript [3] AssemblyScript (beta) [4] Other ('bring your own' Wasm binary) Choose option: [1] 2 Starter kit: [1] Default starter for JavaScript A basic starter kit that demonstrates routing, simple synthetic responses and overriding caching rules. https://github.com/fastly/compute-starter-kit-javascript-default [2] Empty starter for JavaScript An empty application template for the Fastly Compute@Edge environment which simply returns a 200 OK response. https://github.com/fastly/compute-starter-kit-javascript-empty Choose option or paste git URL: [1] 2 \u2713 Initializing... \u2713 Fetching package template... \u2713 Updating package manifest... \u2713 Initializing package... Initialized package Fastly Compute \"Hello, World!\" to: /Users/johnwang/go/src/github.com/grokify/fastly-compute-hello-world-js-2 To publish the package (build and deploy), run: fastly compute publish To learn about deploying Compute@Edge projects using third-party orchestration tools, visit: https://developer.fastly.com/learning/integrations/orchestration/ SUCCESS: Initialized package Fastly Compute \"Hello, World!\" This results in the following list of 5921 files and directories generated from a tar -tf . The vast majority of these are in the node_modules directory which isn't needed for our \"Hello, World!\" program. fastly-compute-hello-world-js.init.contents.txt The top level directory files are as follows without listing out all the files under node_modules . .gitignore README.md fastly.toml node_modules/* npm-shrinkwrap.json package.json src/index.js webpack.config.js Of note, .gitignore omits the node_modules directory along with bin and pkg which haven't been created yet. /node_modules /bin /pkg","title":"Output"},{"location":"compute/quickstart_javascript/#fastlytoml","text":"The fastly.toml file looks like the following. You can add your Service ID here or add it later outside of this file for more deployment flexibility. This tutorial will supply the Service ID as a Fastly CLI command parameter below. # This file describes a Fastly Compute@Edge package. To learn more visit: # https://developer.fastly.com/reference/fastly-toml/ authors = [ \"grokify\" ] description = \"Fastly Compute@Edge \\\"Hello, World!\\\" Example App\" language = \"javascript\" manifest_version = 2 name = \"Fastly Compute \\\"Hello, World!\\\"\" service_id = \"\"","title":"Fastly.toml"},{"location":"compute/quickstart_javascript/#writing-the-code","text":"The starter file is in the src/index.js location which has the following content: /// <reference types=\"@fastly/js-compute\" /> addEventListener ( \"fetch\" , ( event ) => event . respondWith ( handleRequest ( event ))); async function handleRequest ( event ) { return new Response ( \"OK\" , { status : 200 }); }","title":"Writing the Code"},{"location":"compute/quickstart_javascript/#hello-world","text":"To start, let's just modify the \"OK\" text to say \"Hello, World!\" as such: /// <reference types=\"@fastly/js-compute\" /> addEventListener ( \"fetch\" , ( event ) => event . respondWith ( handleRequest ( event ))); async function handleRequest ( event ) { return new Response ( \"Hello, World!\" , { status : 200 }); } The response can be enhanced with a Content-Type header as follows: async function handleRequest ( event ) { return new Response ( \"Hello, World!\" , { status : 200 , headers : new Headers ({ \"Content-Type\" : \"text/html;charset=utf-8\" }), }); }","title":"Hello, World!"},{"location":"compute/quickstart_javascript/#further-reading-on-code","text":"See the following resources for more on writing Edge code in JavaScript: JS SDK Reference JS Code Examples JS Dev Guide JS Starter Kits","title":"Further Reading on Code"},{"location":"compute/quickstart_javascript/#uploading-the-package","text":"This quickstart uses the Fastly CLI to upload and activate the code. Alternate methods of packaging, uploading and activating the service are covered in the Packaging and Deployment pages.","title":"Uploading the Package"},{"location":"compute/quickstart_javascript/#using-the-cli","text":"","title":"Using the CLI"},{"location":"compute/quickstart_javascript/#specifying-your-api-token","text":"Before you upload the file, you will need to get a Fastly API token. You can create one from the Fastly Management Console by following the instructions on the tokens page . A token is an alpha-numeric string that looks like the following: DRYzDkfSjieSDji82ie90830ehf02fDH You can use the token several ways: Via the Fastly CLI parameter --token Via the environment variable FASTLY_API_TOKEN Via the Fastly CLI profile using the commands from % fastly profile --help For this Quickstart, we'll set the token using the environment variable such as following on macOS: % export FASTLY_API_TOKEN = <YourFastlyAPIToken>","title":"Specifying Your API Token"},{"location":"compute/quickstart_javascript/#publishing-the-code","text":"Fastly CLI has a number of commands to build and deploy the code. The following is an excerpt of the response from $ fastly compute --help : COMMANDS compute build Build a Compute@Edge package locally deploy Deploy a package to a Fastly Compute@Edge service init Initialize a new Compute@Edge package locally pack Package a pre-compiled Wasm binary for a Fastly Compute@Edge service publish Build and deploy a Compute@Edge package to a Fastly service serve Build and run a Compute@Edge package locally update Update a package on a Fastly Compute@Edge service version validate Validate a Compute@Edge package We want to both build the WASM binary and deploy it, so we'll use publish : % fastly compute publish --service-id = <YourPackageServiceID> \u2713 Initializing... \u2713 Verifying package manifest... \u2713 Verifying local javascript toolchain... \u2713 Building package using javascript toolchain... \u2713 Creating package archive... SUCCESS: Built package 'Fastly-Compute-Hello-World' ( pkg/Fastly-Compute-Hello-World.tar.gz ) \u2713 Uploading package... \u2713 Activating version... Manage this service at: https://manage.fastly.com/configure/services/<YourPackageServiceID> View this service at: https://goodapis.global.ssl.fastly.net SUCCESS: Deployed package ( service <YourPackageServiceID>, version 1 ) This will create the following files: bin/index.js bin/main.wasm pkg/Fastly-Compute-Hello-World.tar.gz Doing a TAR list will show the file contents: % tar -tf pkg/Fastly-Compute-Hello-World.tar.gz Fastly-Compute-Hello-World/ Fastly-Compute-Hello-World/bin/ Fastly-Compute-Hello-World/bin/index.js Fastly-Compute-Hello-World/bin/main.wasm Fastly-Compute-Hello-World/fastly.toml Fastly-Compute-Hello-World/package.json You can confirm the package upload in the Fastly Management Console at the following URL: https://manage.fastly.com/compute/services/{YourServiceID}/versions/1/package","title":"Publishing the Code"},{"location":"compute/quickstart_javascript/#add-domain-to-service","text":"Use the Fastly Management Console to add a domain to the service. For this Quickstart, use a Fastly subdomain such as: <yoursubdomain>.global.ssl.fastly.net While the Management Console says you need to add a backend host to activate, this example does not require one and you can activate without one. Information on using your own domain as well as adding your domain via alternate methods such as the API and SDKs is covered in the Domains and TLS page.","title":"Add Domain to Service"},{"location":"compute/quickstart_javascript/#access-the-service","text":"Use your browser (or cURL) to retrive https://{yoursubdomain}.global.ssl.fastly.net where {yourdomain} is the subdomain you entered above.","title":"Access The Service"},{"location":"compute/quickstart_swift/","text":"Quickstart for WASM Edge Code using Swift This Quickstart uses the github.com/kateinoigakukun/swift-fastly-edge-example example, which uses the github.com/AndrewBarba/swift-compute-runtime SDK. Prerequisites Install the Swift WASM toolchain from the links at SwiftWASM.org Install the Fastly CLI Quickstart using the CLI: $ /Library/Developer/Toolchains/swift-wasm-5.5.0-RELEASE.xctoolchain/usr/bin/swift build --triple wasm32-unknown-wasi --product FastlyEdgeExample -c release $ fastly compute init $ fastly compute pack --wasm-binary=./.build/release/FastlyEdgeExample.wasm $ fastly compute deploy Additional Approachs See the following pages for using alternative methods for packaging, uploading and activation. Packaging includes information on file structure for creation using Go and manually Uploading & Activating includes information on uploading using the CLI, Fastly Management Console, API, Go SDk, JS SDK and PHP SDK.","title":"Quickstart"},{"location":"compute/quickstart_swift/#quickstart-for-wasm-edge-code-using-swift","text":"This Quickstart uses the github.com/kateinoigakukun/swift-fastly-edge-example example, which uses the github.com/AndrewBarba/swift-compute-runtime SDK.","title":"Quickstart for WASM Edge Code using Swift"},{"location":"compute/quickstart_swift/#prerequisites","text":"Install the Swift WASM toolchain from the links at SwiftWASM.org Install the Fastly CLI","title":"Prerequisites"},{"location":"compute/quickstart_swift/#quickstart-using-the-cli","text":"$ /Library/Developer/Toolchains/swift-wasm-5.5.0-RELEASE.xctoolchain/usr/bin/swift build --triple wasm32-unknown-wasi --product FastlyEdgeExample -c release $ fastly compute init $ fastly compute pack --wasm-binary=./.build/release/FastlyEdgeExample.wasm $ fastly compute deploy","title":"Quickstart using the CLI:"},{"location":"compute/quickstart_swift/#additional-approachs","text":"See the following pages for using alternative methods for packaging, uploading and activation. Packaging includes information on file structure for creation using Go and manually Uploading & Activating includes information on uploading using the CLI, Fastly Management Console, API, Go SDk, JS SDK and PHP SDK.","title":"Additional Approachs"},{"location":"compute/starter_kits/","text":"Starter Kits JavaScript Default starter for JavaScript : A basic starter kit that demonstrates routing, simple synthetic responses and overriding caching rules. Empty starter for JavaScript : An empty application template for the Fastly Compute@Edge environment which simply returns a 200 OK response. Optimizely : A basic starter kit for Fastly's Compute@Edge with Optimizely built in. AssemblyScript Default starter for AssemblyScript : A basic starter kit that demonstrates routing, simple synthetic responses and overriding caching rules. Rust Default starter for Rust : A basic starter kit that demonstrates routing, simple synthetic responses and overriding caching rules. Empty starter for Rust : An empty starter kit project template. Authenticate at edge with OAuth : Connect to an identity provider such as Auth0 using OAuth 2.0 and validate authentication status at the Edge, to authorize access to your edge or origin hosted applications. Beacon termination : Capture beacon data from the browser, divert beacon request payloads to a log endpoint, and avoid putting load on your own infrastructure. Static content : Apply performance, security and usability upgrades to static bucket services such as Google Cloud Storage or AWS S3. Integrate Storj using Rust : Use Storj as a backend origin for service decentralized objects to the fastly Compute@Edge service.","title":"Starter Kits"},{"location":"compute/starter_kits/#starter-kits","text":"","title":"Starter Kits"},{"location":"compute/starter_kits/#javascript","text":"Default starter for JavaScript : A basic starter kit that demonstrates routing, simple synthetic responses and overriding caching rules. Empty starter for JavaScript : An empty application template for the Fastly Compute@Edge environment which simply returns a 200 OK response. Optimizely : A basic starter kit for Fastly's Compute@Edge with Optimizely built in.","title":"JavaScript"},{"location":"compute/starter_kits/#assemblyscript","text":"Default starter for AssemblyScript : A basic starter kit that demonstrates routing, simple synthetic responses and overriding caching rules.","title":"AssemblyScript"},{"location":"compute/starter_kits/#rust","text":"Default starter for Rust : A basic starter kit that demonstrates routing, simple synthetic responses and overriding caching rules. Empty starter for Rust : An empty starter kit project template. Authenticate at edge with OAuth : Connect to an identity provider such as Auth0 using OAuth 2.0 and validate authentication status at the Edge, to authorize access to your edge or origin hosted applications. Beacon termination : Capture beacon data from the browser, divert beacon request payloads to a log endpoint, and avoid putting load on your own infrastructure. Static content : Apply performance, security and usability upgrades to static bucket services such as Google Cloud Storage or AWS S3. Integrate Storj using Rust : Use Storj as a backend origin for service decentralized objects to the fastly Compute@Edge service.","title":"Rust"},{"location":"compute/toml_metadata/","text":"The TOML Metadata file The fastly.toml metadata file format is described in the fastly.toml reference This file does a number of things including: metadata build scripts backends dictionaries logging endpoints Package Name A basic fastly.toml file looks like the following: manifest_version = 2 name = \"my-compute-project\" description = \"A wonderful Compute@Edge project that adds edge computing goodness to my application architecture.\" authors = [ \"me@example.com\" ] language = \"rust\" service_id = \"SU1Z0isxPaozGVKXdv0eY\"","title":"The TOML Metadata file"},{"location":"compute/toml_metadata/#the-toml-metadata-file","text":"The fastly.toml metadata file format is described in the fastly.toml reference This file does a number of things including: metadata build scripts backends dictionaries logging endpoints","title":"The TOML Metadata file"},{"location":"compute/toml_metadata/#package-name","text":"A basic fastly.toml file looks like the following: manifest_version = 2 name = \"my-compute-project\" description = \"A wonderful Compute@Edge project that adds edge computing goodness to my application architecture.\" authors = [ \"me@example.com\" ] language = \"rust\" service_id = \"SU1Z0isxPaozGVKXdv0eY\"","title":"Package Name"},{"location":"compute/tutorial_api/","text":"Uploading and Activation via the API This guide covers 2 ways to upload the package: From scratch with no pre-existing service With a pre-existing service Both of these apporaches use the API for complete automation support. Both of these approaches have parts that can be performed with the UI includign: Creating a service Adding domains to a service Adding backends to a service Using Fastly CLI, deployment and activiation is accomplished by the fastly compute deploy command. Uploading the Package is performed via the REST API, which is where the serviceID and API token are needed. Create a New Service Use the following steps to create New Service entirely using APIs. Create the new service with the \"Create a service\" API . Add one or more Domains by calling the \"Add a domain name to a service\" API . Add one or more backend hosts by calling the \"Create a backend\" API . To upload the Edge code package tarball, call the \"Upload a Compute@Edge package\" API . Activate the new Edge code by calling the Activate a service version . Using cURL, the commands look like the following: \"Create a service\" API . For the next steps, use the service version that you receive back in the API response. This in an auto-incrementing integer, e.g. 1 , 2 , etc. % curl -D - -X POST --location \"https://api.fastly.com/service\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: {YOUR_FASTLY_TOKEN}\" \\ -d \"name=test-service\" \"Add a domain name to a service\" API : % curl -D - -X POST --location \"https://api.fastly.com/service/{YOUR_SERVICE_ID}/version/{YOUR_SERVICE_VERSION}/domain\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: {YOUR_FASTLY_TOKEN}\" \\ -d \"name=www.example.com\" \"Create a backend\" API : % curl -D - -X POST --location \"https://api.fastly.com/service/{YOUR_SERVICE_ID}/version/{YOUR_SERVICE_VERSION}/backend\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" \\ -d \"address=127.0.0.1&name=test-backend&port=80\" \"Upload a Compute@Edge package\" API : % curl -D - -X PUT --location \"https://api.fastly.com/service/{YOUR_SERVICE_ID}/version/{YOUR_SERVICE_VERSION}/package\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" \\ -H \"expect: 100-continue\" \\ -F \"package=@/path/to/file\" Activate a service version : % curl -D - -X PUT --location \"https://api.fastly.com/service/{YOUR_SERVICE_ID}/version/{YOUR_SERVICE_VERSION}/activate\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" Update an Existing Service Cloning an existing service will carry over existing configuration including the domains and backend hosts. By cloning a service where these are configured in the current configuration, the only additional steps are to (a) upload the package and (b) activate the service version. Create the new service with the \"Clone a service version\" API To upload the Edge code package tarball, call the \"Upload a Compute@Edge package\" API . Activate the new Edge code by calling the Activate a service version . \"Clone a service version\" API : % curl -D - -X PUT --location \"https://api.fastly.com/service/SU1Z0isxPaozGVKXdv0eY/version/1/clone\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" Steps for uploading a package and activating a service version are as shown above.","title":"Quickstart for APIs"},{"location":"compute/tutorial_api/#uploading-and-activation-via-the-api","text":"This guide covers 2 ways to upload the package: From scratch with no pre-existing service With a pre-existing service Both of these apporaches use the API for complete automation support. Both of these approaches have parts that can be performed with the UI includign: Creating a service Adding domains to a service Adding backends to a service Using Fastly CLI, deployment and activiation is accomplished by the fastly compute deploy command. Uploading the Package is performed via the REST API, which is where the serviceID and API token are needed.","title":"Uploading and Activation via the API"},{"location":"compute/tutorial_api/#create-a-new-service","text":"Use the following steps to create New Service entirely using APIs. Create the new service with the \"Create a service\" API . Add one or more Domains by calling the \"Add a domain name to a service\" API . Add one or more backend hosts by calling the \"Create a backend\" API . To upload the Edge code package tarball, call the \"Upload a Compute@Edge package\" API . Activate the new Edge code by calling the Activate a service version . Using cURL, the commands look like the following: \"Create a service\" API . For the next steps, use the service version that you receive back in the API response. This in an auto-incrementing integer, e.g. 1 , 2 , etc. % curl -D - -X POST --location \"https://api.fastly.com/service\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: {YOUR_FASTLY_TOKEN}\" \\ -d \"name=test-service\" \"Add a domain name to a service\" API : % curl -D - -X POST --location \"https://api.fastly.com/service/{YOUR_SERVICE_ID}/version/{YOUR_SERVICE_VERSION}/domain\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: {YOUR_FASTLY_TOKEN}\" \\ -d \"name=www.example.com\" \"Create a backend\" API : % curl -D - -X POST --location \"https://api.fastly.com/service/{YOUR_SERVICE_ID}/version/{YOUR_SERVICE_VERSION}/backend\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" \\ -d \"address=127.0.0.1&name=test-backend&port=80\" \"Upload a Compute@Edge package\" API : % curl -D - -X PUT --location \"https://api.fastly.com/service/{YOUR_SERVICE_ID}/version/{YOUR_SERVICE_VERSION}/package\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" \\ -H \"expect: 100-continue\" \\ -F \"package=@/path/to/file\" Activate a service version : % curl -D - -X PUT --location \"https://api.fastly.com/service/{YOUR_SERVICE_ID}/version/{YOUR_SERVICE_VERSION}/activate\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\"","title":"Create a New Service"},{"location":"compute/tutorial_api/#update-an-existing-service","text":"Cloning an existing service will carry over existing configuration including the domains and backend hosts. By cloning a service where these are configured in the current configuration, the only additional steps are to (a) upload the package and (b) activate the service version. Create the new service with the \"Clone a service version\" API To upload the Edge code package tarball, call the \"Upload a Compute@Edge package\" API . Activate the new Edge code by calling the Activate a service version . \"Clone a service version\" API : % curl -D - -X PUT --location \"https://api.fastly.com/service/SU1Z0isxPaozGVKXdv0eY/version/1/clone\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" Steps for uploading a package and activating a service version are as shown above.","title":"Update an Existing Service"},{"location":"compute/uploading_and_activation/","text":"Uploading and Activating a Edge Function Package Deployment includes two steps, uploading the package and activating it. These steps can be done via a variety of methods including the CLI, UI, API and API SDKs. The core APIs used for all the approaches aside from the UI are to use the package upload API and the service activation API: Upload a Compute@Edge package API PUT /service/{service_id}/version/{version_id}/package Activate a service version API PUT /service/{service_id}/version/{version_id}/activate The following provides a short description of this for each. CLI Console cURL Go JavaScript PHP HTTP Uploading and Activating the Package using the CLI The CLI is available from GitHub . Using the Fastly CLI is described in detail in the Learning Guide . From the project root, execute the following command. The command for building the package file, fastly compute build , should have created the file pkg/my-package.tar.gz in your project root. % fastly compute deploy Uploading the Package with the Management Console In the Fastly web management console , nagivate to your Compute \"Service configuration\" page and then use the drag-and-drop functionality to upload your Edge Code package. The in the upper right corner of the page, click the \"Activate\" button. Uploading the Package with cURL % curl -D - -X PUT --location \"https://api.fastly.com/service/SU1Z0isxPaozGVKXdv0eY/version/1/package\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" \\ -H \"expect: 100-continue\" \\ -F \"package=@/path/to/file\" Activating the Package with cURL % curl -D - -X PUT --location \"https://api.fastly.com/service/SU1Z0isxPaozGVKXdv0eY/version/1/activate\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" Uploading the Package with Go \u21d7 Call the UpdatePackage function on your fastly.Client instance, which has the following definition: func ( c * Client ) UpdatePackage ( i * UpdatePackageInput ) ( * Package , error ) Example function call: // fastlyClient is an instance of `fastly.Client` pkg , err := fastlyClient . UpdatePackage ( & fastly . UpdatePackageInput { ServiceID : \"YOUR_SERVICE_ID\" , // required ServiceVersion : 1 , // required. Service version is an integer PackagePath : \"/path/to/your-package.tar.gz\" , }, ) Activating the Package with Go \u21d7 Call the ActivateVersion function on your fastly.Client instance, which has the following definition: func ( c * Client ) ActivateVersion ( i * ActivateVersionInput ) ( * Version , error ) Example function call: // fastlyClient is an instance of `fastly.Client` pkg , err := fastlyClient . ActivateVersion ( & fastly . ActivateVersionInput { ServiceID : \"YOUR_SERVICE_ID\" , // required ServiceVersion : 1 , // required. Service version is an integer }, ) Uploading the Package with JavaScript Use the JavaScript SDK's putPackage function : const options = { service_id : \"service_id_example\" , // required version_id : 56 , // required expect : 100 - continue , _package : \"/path/to/file\" , }; apiInstance . putPackage ( options ) . then (( data ) => { console . log ( data , \"API called successfully.\" ); }) . catch (( error ) => { console . error ( error ); }); Activating the Package with JavaScript Use the activateServiceVersion function : const options = { service_id : \"service_id_example\" , // required version_id : 56 , // required }; apiInstance . activateServiceVersion ( options ) . then (( data ) => { console . log ( data , \"API called successfully.\" ); }) . catch (( error ) => { console . error ( error ); }); Uploading the Package with PHP Use the PHP SDK's putPackage function : $options['service_id'] = 'service_id_example'; // string | Alphanumeric string identifying the service. $options['version_id'] = 56; // int | Integer identifying a service version. $options['expect'] = 100-continue; // string | We recommend using the Expect header because it may identify issues with the request based upon the headers alone instead of requiring you to wait until the entire binary package upload has completed. $options['package'] = \"/path/to/file.txt\"; // \\SplFileObject | The content of the Wasm binary package. try { $result = $apiInstance->putPackage($options); } catch (Exception $e) { echo 'Exception when calling PackageApi->putPackage: ', $e->getMessage(), PHP_EOL; } Activating the Package with PHP Use the PHP SDK's activateserviceversion function : $options['service_id'] = 'service_id_example'; // string | Alphanumeric string identifying the service. $options['version_id'] = 56; // int | Integer identifying a service version. try { $result = $apiInstance->activateServiceVersion($options); } catch (Exception $e) { echo 'Exception when calling VersionApi->activateServiceVersion: ', $e->getMessage(), PHP_EOL; } Uploading the Package HTTP info PUT /service/SU1Z0isxPaozGVKXdv0eY/version/1/package HTTP/1.1 Host: api.fastly.com Content-Type: multipart/form-data; boundary=\"boundary\" Accept: application/json Fastly-Key: YOUR_FASTLY_TOKEN expect: 100-continue --boundary Content-Disposition: form-data; name=\"package\" (binary data ...) Activating the Package HTTP info PUT /service/SU1Z0isxPaozGVKXdv0eY/version/1/activate HTTP/1.1 Host: api.fastly.com Accept: application/json Fastly-Key: YOUR_FASTLY_TOKEN","title":"Overview"},{"location":"compute/uploading_and_activation/#uploading-and-activating-a-edge-function-package","text":"Deployment includes two steps, uploading the package and activating it. These steps can be done via a variety of methods including the CLI, UI, API and API SDKs. The core APIs used for all the approaches aside from the UI are to use the package upload API and the service activation API: Upload a Compute@Edge package API PUT /service/{service_id}/version/{version_id}/package Activate a service version API PUT /service/{service_id}/version/{version_id}/activate The following provides a short description of this for each. CLI Console cURL Go JavaScript PHP HTTP Uploading and Activating the Package using the CLI The CLI is available from GitHub . Using the Fastly CLI is described in detail in the Learning Guide . From the project root, execute the following command. The command for building the package file, fastly compute build , should have created the file pkg/my-package.tar.gz in your project root. % fastly compute deploy Uploading the Package with the Management Console In the Fastly web management console , nagivate to your Compute \"Service configuration\" page and then use the drag-and-drop functionality to upload your Edge Code package. The in the upper right corner of the page, click the \"Activate\" button. Uploading the Package with cURL % curl -D - -X PUT --location \"https://api.fastly.com/service/SU1Z0isxPaozGVKXdv0eY/version/1/package\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" \\ -H \"expect: 100-continue\" \\ -F \"package=@/path/to/file\" Activating the Package with cURL % curl -D - -X PUT --location \"https://api.fastly.com/service/SU1Z0isxPaozGVKXdv0eY/version/1/activate\" \\ -H \"Accept: application/json\" \\ -H \"Fastly-Key: YOUR_FASTLY_TOKEN\" Uploading the Package with Go \u21d7 Call the UpdatePackage function on your fastly.Client instance, which has the following definition: func ( c * Client ) UpdatePackage ( i * UpdatePackageInput ) ( * Package , error ) Example function call: // fastlyClient is an instance of `fastly.Client` pkg , err := fastlyClient . UpdatePackage ( & fastly . UpdatePackageInput { ServiceID : \"YOUR_SERVICE_ID\" , // required ServiceVersion : 1 , // required. Service version is an integer PackagePath : \"/path/to/your-package.tar.gz\" , }, ) Activating the Package with Go \u21d7 Call the ActivateVersion function on your fastly.Client instance, which has the following definition: func ( c * Client ) ActivateVersion ( i * ActivateVersionInput ) ( * Version , error ) Example function call: // fastlyClient is an instance of `fastly.Client` pkg , err := fastlyClient . ActivateVersion ( & fastly . ActivateVersionInput { ServiceID : \"YOUR_SERVICE_ID\" , // required ServiceVersion : 1 , // required. Service version is an integer }, ) Uploading the Package with JavaScript Use the JavaScript SDK's putPackage function : const options = { service_id : \"service_id_example\" , // required version_id : 56 , // required expect : 100 - continue , _package : \"/path/to/file\" , }; apiInstance . putPackage ( options ) . then (( data ) => { console . log ( data , \"API called successfully.\" ); }) . catch (( error ) => { console . error ( error ); }); Activating the Package with JavaScript Use the activateServiceVersion function : const options = { service_id : \"service_id_example\" , // required version_id : 56 , // required }; apiInstance . activateServiceVersion ( options ) . then (( data ) => { console . log ( data , \"API called successfully.\" ); }) . catch (( error ) => { console . error ( error ); }); Uploading the Package with PHP Use the PHP SDK's putPackage function : $options['service_id'] = 'service_id_example'; // string | Alphanumeric string identifying the service. $options['version_id'] = 56; // int | Integer identifying a service version. $options['expect'] = 100-continue; // string | We recommend using the Expect header because it may identify issues with the request based upon the headers alone instead of requiring you to wait until the entire binary package upload has completed. $options['package'] = \"/path/to/file.txt\"; // \\SplFileObject | The content of the Wasm binary package. try { $result = $apiInstance->putPackage($options); } catch (Exception $e) { echo 'Exception when calling PackageApi->putPackage: ', $e->getMessage(), PHP_EOL; } Activating the Package with PHP Use the PHP SDK's activateserviceversion function : $options['service_id'] = 'service_id_example'; // string | Alphanumeric string identifying the service. $options['version_id'] = 56; // int | Integer identifying a service version. try { $result = $apiInstance->activateServiceVersion($options); } catch (Exception $e) { echo 'Exception when calling VersionApi->activateServiceVersion: ', $e->getMessage(), PHP_EOL; } Uploading the Package HTTP info PUT /service/SU1Z0isxPaozGVKXdv0eY/version/1/package HTTP/1.1 Host: api.fastly.com Content-Type: multipart/form-data; boundary=\"boundary\" Accept: application/json Fastly-Key: YOUR_FASTLY_TOKEN expect: 100-continue --boundary Content-Disposition: form-data; name=\"package\" (binary data ...) Activating the Package HTTP info PUT /service/SU1Z0isxPaozGVKXdv0eY/version/1/activate HTTP/1.1 Host: api.fastly.com Accept: application/json Fastly-Key: YOUR_FASTLY_TOKEN","title":"Uploading and Activating a Edge Function Package"},{"location":"compute/writing_code/","text":"Writing WASM Edge Code using AssemblyScript The Code The Do-Nothing Function The \"do-nothing\" function simply does what Fastly does by default by fetch and returning code from the back end. This is a useful way to start as other functionality will be modifications of this flow. Dependencies: { \"@fastly/as-compute\" : \"^0.5.0\" } Code: import { Fastly } from \"@fastly/as-compute\" ; // Get the request from the client. let req = Fastly . getClientRequest (); // Send the request to the backend server. let beresp = Fastly . fetch ( req , { backend : \"origin_0\" , cacheOverride : null , }). wait (); // Send the backend response back to the client. Fastly . respondWith ( beresp ); Creating the WASM Binary JavaScript Swift Creating the WASM binary using JavaScript In your package's package.json file, ensure you define the build script. The following is an example from github.com/fastly/compute-starter-kit-javascript-default . { \"scripts\" : { \"prebuild\" : \"webpack\" , \"build\" : \"js-compute-runtime --skip-pkg bin/index.js bin/main.wasm\" , \"deploy\" : \"npm run build && fastly compute deploy\" } } To build the package using the Fastly CLI, run: % fastly compute build You can also run this manually by executing the build script via npm : % npm run build Creating the WASM binary using Swift Swift is enabled by the community Swift SDK for Fastly Compute: github.com/AndrewBarba/swift-compute-runtime . The following is from an community example using this SDK: github.com/kateinoigakukun/swift-fastly-edge-example Package.swift // swift-tools-version:5.5 // The swift-tools-version declares the minimum version of Swift required to build this package. import PackageDescription let package = Package( name: \"FastlyEdgeExample\", dependencies: [ .package(name: \"Compute\", url: \"https://github.com/AndrewBarba/swift-compute-runtime\", branch: \"main\") ], targets: [ .executableTarget(name: \"FastlyEdgeExample\", dependencies: [\"Compute\"]), ] ) Build the WASM binary: % /Library/Developer/Toolchains/swift-wasm-5.6.0-RELEASE.xctoolchain/usr/bin/swift build --triple wasm32-unknown-wasi --product FastlyEdgeExample -c release This will build a binary in the following location: .build/release/FastlyEdgeExample.wasm Links Examples: https://developer.fastly.com/solutions/examples/assemblyscript/ Fastly Fiddle: https://fiddle.fastlydemo.net/","title":"Writing WASM Edge Code using AssemblyScript"},{"location":"compute/writing_code/#writing-wasm-edge-code-using-assemblyscript","text":"","title":"Writing WASM Edge Code using AssemblyScript"},{"location":"compute/writing_code/#the-code","text":"","title":"The Code"},{"location":"compute/writing_code/#the-do-nothing-function","text":"The \"do-nothing\" function simply does what Fastly does by default by fetch and returning code from the back end. This is a useful way to start as other functionality will be modifications of this flow. Dependencies: { \"@fastly/as-compute\" : \"^0.5.0\" } Code: import { Fastly } from \"@fastly/as-compute\" ; // Get the request from the client. let req = Fastly . getClientRequest (); // Send the request to the backend server. let beresp = Fastly . fetch ( req , { backend : \"origin_0\" , cacheOverride : null , }). wait (); // Send the backend response back to the client. Fastly . respondWith ( beresp );","title":"The Do-Nothing Function"},{"location":"compute/writing_code/#creating-the-wasm-binary","text":"JavaScript Swift Creating the WASM binary using JavaScript In your package's package.json file, ensure you define the build script. The following is an example from github.com/fastly/compute-starter-kit-javascript-default . { \"scripts\" : { \"prebuild\" : \"webpack\" , \"build\" : \"js-compute-runtime --skip-pkg bin/index.js bin/main.wasm\" , \"deploy\" : \"npm run build && fastly compute deploy\" } } To build the package using the Fastly CLI, run: % fastly compute build You can also run this manually by executing the build script via npm : % npm run build Creating the WASM binary using Swift Swift is enabled by the community Swift SDK for Fastly Compute: github.com/AndrewBarba/swift-compute-runtime . The following is from an community example using this SDK: github.com/kateinoigakukun/swift-fastly-edge-example Package.swift // swift-tools-version:5.5 // The swift-tools-version declares the minimum version of Swift required to build this package. import PackageDescription let package = Package( name: \"FastlyEdgeExample\", dependencies: [ .package(name: \"Compute\", url: \"https://github.com/AndrewBarba/swift-compute-runtime\", branch: \"main\") ], targets: [ .executableTarget(name: \"FastlyEdgeExample\", dependencies: [\"Compute\"]), ] ) Build the WASM binary: % /Library/Developer/Toolchains/swift-wasm-5.6.0-RELEASE.xctoolchain/usr/bin/swift build --triple wasm32-unknown-wasi --product FastlyEdgeExample -c release This will build a binary in the following location: .build/release/FastlyEdgeExample.wasm","title":"Creating the WASM Binary"},{"location":"compute/writing_code/#links","text":"Examples: https://developer.fastly.com/solutions/examples/assemblyscript/ Fastly Fiddle: https://fiddle.fastlydemo.net/","title":"Links"}]}